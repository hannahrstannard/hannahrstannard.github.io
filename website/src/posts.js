export const posts = [
	{
		"date": "01/12/2019",
		"title": "Why Comments Are Actually Useful.",
		"content": "<p>I recently attended CodeMash, a programming conference in Sandusky, OH â€” if you haven't gone, I highly recommend it! Many of the sessions were very informative; there was a talk by Jon Skeet that went into great detail about a specific part of versioning, and while I don't believe I'll have the chance to put into practice what he said any time soon, it was an enlightening and informative talk; another talk by Patrick Bradley, \"DISCovering your team: A Guide to Effective Communication\", covered the DiSC behavior assessment tool and how it could be used to better communicate with your team; the last talk I went to explained the origins of modern programming languages and what influenced their syntax and structure.</p><p>There was one session, however, that rubbed me the wrong way: \"Comments are Useless and Other Controversial Opinions About Code\". The basis of her talk, if not obvious, is that your code should not contain ANY comments (after talking about this for 15 minutes, however, she did give a caveat, but continued to preach comment-less code). While I agree that self-documenting code is what we all should strive for, I do believe there are a few exceptions to this rule.<dl><dt>TODOs.</dt><dd><p>The speaker informed all of us that TODOs should NEVER be in your code. They clutter it up and aren't helpful. But... aren't they? What if you are on a tight deadline and you're going going going and don't have time to do everything perfectly? Everyone wants to \"do it right\" the first time, but sometimes, organization and cleanliness might suffer if you have more important things to do, like actually getting your product to work. Refactoring and restructuring can *hopefully* happen later, but at the end of the day, the customer or user isn't going to notice that your method name is self-documenting or that you split up that method that was probably too long into 3 shorter methods.</p><p>What happens if production is broken and you need to quickly get a fix out? Time is of the essence, and you can't necessarily spend an extra hour organizing your code when production is down and unusable. Leaving a quick TODO to come back and clean up this code is probably the best thing to do.</p><p>Simply deleting all of the TODOs in your code base isn't going to help anyone. Many modern IDEs will collect all the TODOs and have them available for you so you don't have to go hunting them all down. What's the purpose in deleting that \"useless\" comment if you can't actually go back and find the code that needed to be fixed?</p></dd><dt>Business Logic.</dt><dd><p>According to the speaker, we should let our code and unit tests do the talking for the business logic in the code. While I completely agree, sometimes, a well-placed comment can save hours of trying to figure out what the code is saying. If new team members join and are looking at the code for the first time, what do you think is more helpful? Telling them to go look at the unit tests and try to understand what all of the terminology is and business rules are, or having a simple comment that says, \"Hey, this is how this works\"? I don't know about you, but reading a couple of sentences is far easier that sifting through unit tests (if there are any, but that's another story) and reading variable/method names.</p></dd></dl><p>Again, I love self-documenting code. I do believe that if something can be done without comments, it should be. However, I'm not so ignorant as to say that all comments are useless. Sometimes, the only way to explain something is to leave a comment. And that's alright.</p>",
	},
]